import { prisma } from './prisma';
import { NivelRisco, StatusAlerta } from '@prisma/client';

// Interface para dados do alerta
interface DadosAlerta {
  conversaId: string;
  usuarioId: string;
  nivelRisco: NivelRisco;
  detalhes: string;
  palavrasChave?: string[];
  contextoAdicional?: never;
}

// Interface para notifica√ß√£o
interface NotificacaoAlerta {
  alertaId: string;
  nivelRisco: NivelRisco;
  usuario: {
    id: string;
    nomeAnonimo?: string;
    idade: number;
    faixaEtaria: string;
  };
  conversa: {
    textoUsuario: string;
    textoIa: string;
    dataHora: Date;
  };
  detalhes: string;
  palavrasChave?: string[];
}

// Fun√ß√£o para criar alerta
export async function criarAlerta(dados: DadosAlerta): Promise<string> {
  try {
    const alerta = await prisma.alerta.create({
      data: {
        conversaId: dados.conversaId,
        usuarioId: dados.usuarioId,
        nivelRisco: dados.nivelRisco,
        status: 'PENDENTE',
        detalhes: dados.detalhes
      }
    });

    // Enviar notifica√ß√£o para equipe de apoio
    await enviarNotificacaoEquipe(alerta.id);

    // Log do alerta criado
    console.log(`üö® ALERTA CRIADO: ${dados.nivelRisco} - Usu√°rio: ${dados.usuarioId} - ID: ${alerta.id}`);

    return alerta.id;
  } catch (error) {
    console.error('Erro ao criar alerta:', error);
    throw error;
  }
}

// Fun√ß√£o para buscar alertas pendentes
export async function buscarAlertasPendentes(limite: number = 50) {
  try {
    const alertas = await prisma.alerta.findMany({
      where: {
        status: {
          in: ['PENDENTE', 'EM_ANALISE']
        }
      },
      include: {
        usuario: {
          select: {
            id: true,
            nomeAnonimo: true,
            idade: true,
            email: true
          }
        },
        conversa: {
          select: {
            textoUsuario: true,
            textoIa: true,
            dataHora: true,
            faixaEtaria: true
          }
        }
      },
      orderBy: [
        { nivelRisco: 'desc' }, // CRITICO primeiro
        { dataHora: 'desc' }
      ],
      take: limite
    });

    return alertas;
  } catch (error) {
    console.error('Erro ao buscar alertas pendentes:', error);
    return [];
  }
}

// Fun√ß√£o para atualizar status do alerta
export async function atualizarStatusAlerta(
  alertaId: string, 
  novoStatus: StatusAlerta,
  observacoes?: string
): Promise<boolean> {
  try {
    await prisma.alerta.update({
      where: { id: alertaId },
      data: {
        status: novoStatus,
        // TODO: Adicionar campo observacoes no schema se necess√°rio
      }
    });

    console.log(`üìù Alerta ${alertaId} atualizado para: ${novoStatus}`);
    return true;
  } catch (error) {
    console.error('Erro ao atualizar status do alerta:', error);
    return false;
  }
}

// Fun√ß√£o para buscar hist√≥rico de alertas de um usu√°rio
export async function buscarHistoricoAlertasUsuario(usuarioId: string) {
  try {
    const alertas = await prisma.alerta.findMany({
      where: { usuarioId },
      include: {
        conversa: {
          select: {
            textoUsuario: true,
            dataHora: true
          }
        }
      },
      orderBy: { dataHora: 'desc' },
      take: 20
    });

    return alertas;
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico de alertas:', error);
    return [];
  }
}

// Fun√ß√£o para obter estat√≠sticas de alertas
export async function obterEstatisticasAlertas() {
  try {
    const [
      totalAlertas,
      alertasPendentes,
      alertasEmAnalise,
      alertasResolvidos,
      alertasPorNivel,
      alertasUltimos7Dias
    ] = await Promise.all([
      // Total de alertas
      prisma.alerta.count(),

      // Alertas pendentes
      prisma.alerta.count({
        where: { status: 'PENDENTE' }
      }),

      // Alertas em an√°lise
      prisma.alerta.count({
        where: { status: 'EM_ANALISE' }
      }),

      // Alertas resolvidos
      prisma.alerta.count({
        where: { status: 'RESOLVIDO' }
      }),

      // Alertas por n√≠vel de risco
      prisma.alerta.groupBy({
        by: ['nivelRisco'],
        _count: {
          id: true
        }
      }),

      // Alertas dos √∫ltimos 7 dias
      prisma.alerta.count({
        where: {
          dataHora: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          }
        }
      })
    ]);

    return {
      total: totalAlertas,
      pendentes: alertasPendentes,
      emAnalise: alertasEmAnalise,
      resolvidos: alertasResolvidos,
      porNivel: alertasPorNivel.reduce((acc, item) => {
        acc[item.nivelRisco] = item._count.id;
        return acc;
      }, {} as Record<string, number>),
      ultimos7Dias: alertasUltimos7Dias
    };
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas de alertas:', error);
    return {
      total: 0,
      pendentes: 0,
      emAnalise: 0,
      resolvidos: 0,
      porNivel: {},
      ultimos7Dias: 0
    };
  }
}

// Fun√ß√£o para enviar notifica√ß√£o para equipe de apoio
async function enviarNotificacaoEquipe(alertaId: string) {
  try {
    // Buscar dados completos do alerta
    const alerta = await prisma.alerta.findUnique({
      where: { id: alertaId },
      include: {
        usuario: {
          select: {
            id: true,
            nomeAnonimo: true,
            idade: true,
            email: true
          }
        },
        conversa: {
          select: {
            textoUsuario: true,
            textoIa: true,
            dataHora: true,
            faixaEtaria: true
          }
        }
      }
    });

    if (!alerta) {
      throw new Error('Alerta n√£o encontrado');
    }

    // Buscar equipe de apoio dispon√≠vel
    const equipeDisponivel = await prisma.equipeDeApoio.findMany({
      where: { disponivel: true }
    });

    if (equipeDisponivel.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum membro da equipe de apoio dispon√≠vel');
      return;
    }

    const notificacao: NotificacaoAlerta = {
      alertaId: alerta.id,
      nivelRisco: alerta.nivelRisco,
      usuario: {
        id: alerta.usuario.id,
        nomeAnonimo: alerta.usuario.nomeAnonimo,
        idade: alerta.usuario.idade,
        faixaEtaria: alerta.conversa.faixaEtaria
      },
      conversa: {
        textoUsuario: alerta.conversa.textoUsuario,
        textoIa: alerta.conversa.textoIa,
        dataHora: alerta.conversa.dataHora
      },
      detalhes: alerta.detalhes
    };

    // Enviar notifica√ß√£o para cada membro da equipe
    for (const membro of equipeDisponivel) {
      await enviarNotificacaoIndividual(membro, notificacao);
    }

    console.log(`üìß Notifica√ß√µes enviadas para ${equipeDisponivel.length} membros da equipe`);

  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o para equipe:', error);
  }
}

// Fun√ß√£o para enviar notifica√ß√£o individual
async function enviarNotificacaoIndividual(
  membro: any, 
  notificacao: NotificacaoAlerta
) {
  try {
    // TODO: Implementar integra√ß√£o com servi√ßo de notifica√ß√£o real
    // Exemplos: Email, SMS, Slack, Discord, etc.

    const urgencia = getUrgenciaTexto(notificacao.nivelRisco);
    const assunto = `üö® ALERTA ${urgencia}: Usu√°rio precisa de apoio`;
    
    const mensagem = `
ALERTA DE RISCO: ${notificacao.nivelRisco}

Usu√°rio: ${notificacao.usuario.nomeAnonimo || 'An√¥nimo'}
Idade: ${notificacao.usuario.idade} anos
Faixa Et√°ria: ${notificacao.usuario.faixaEtaria}

Mensagem do usu√°rio:
"${notificacao.conversa.textoUsuario}"

Detalhes do alerta:
${notificacao.detalhes}

Data/Hora: ${notificacao.conversa.dataHora.toLocaleString('pt-BR')}

ID do Alerta: ${notificacao.alertaId}

${getAcaoRecomendada(notificacao.nivelRisco)}
    `;

    // Simula√ß√£o de envio (substituir por servi√ßo real)
    console.log(`üìß Notifica√ß√£o para ${membro.email}:`);
    console.log(`Assunto: ${assunto}`);
    console.log(`Mensagem: ${mensagem}`);

    // Em produ√ß√£o, implementar:
    // await servicoEmail.enviar({
    //   para: membro.email,
    //   assunto,
    //   corpo: mensagem,
    //   prioridade: notificacao.nivelRisco === 'CRITICO' ? 'alta' : 'normal'
    // });

    // await servicoSMS.enviar({
    //   telefone: membro.telefone,
    //   mensagem: `ALERTA ${urgencia}: Usu√°rio ${notificacao.usuario.id} precisa de apoio. Verifique o painel.`
    // });

  } catch (error) {
    console.error(`Erro ao enviar notifica√ß√£o para ${membro.email}:`, error);
  }
}

// Fun√ß√£o auxiliar para obter texto de urg√™ncia
function getUrgenciaTexto(nivel: NivelRisco): string {
  switch (nivel) {
    case 'CRITICO': return 'CR√çTICO';
    case 'ALTO': return 'ALTO';
    case 'MEDIO': return 'M√âDIO';
    case 'BAIXO': return 'BAIXO';
    default: return 'DESCONHECIDO';
  }
}

// Fun√ß√£o auxiliar para obter a√ß√£o recomendada
function getAcaoRecomendada(nivel: NivelRisco): string {
  switch (nivel) {
    case 'CRITICO':
      return `
‚ö†Ô∏è A√á√ÉO IMEDIATA NECESS√ÅRIA:
- Contatar o usu√°rio imediatamente
- Considerar acionamento de servi√ßos de emerg√™ncia
- Monitoramento cont√≠nuo
- CVV: 188 (dispon√≠vel para orienta√ß√£o)
      `;
    case 'ALTO':
      return `
üî¥ A√á√ÉO URGENTE:
- Contatar o usu√°rio em at√© 1 hora
- Oferecer suporte especializado
- Acompanhamento pr√≥ximo
      `;
    case 'MEDIO':
      return `
üü° A√á√ÉO NECESS√ÅRIA:
- Contatar o usu√°rio em at√© 4 horas
- Oferecer recursos de apoio
- Agendar acompanhamento
      `;
    case 'BAIXO':
      return `
üü¢ MONITORAMENTO:
- Acompanhar evolu√ß√£o
- Disponibilizar recursos
- Contato em at√© 24 horas se necess√°rio
      `;
    default:
      return 'Avaliar situa√ß√£o e tomar a√ß√£o apropriada.';
  }
}

// Fun√ß√£o para criar membro da equipe de apoio
export async function criarMembroEquipe(dados: {
  email: string;
  nome: string;
  funcao: string;
}) {
  try {
    const membro = await prisma.equipeDeApoio.create({
      data: {
        email: dados.email,
        nome: dados.nome,
        funcao: dados.funcao,
        disponivel: true
      }
    });

    console.log(`üë• Novo membro da equipe criado: ${dados.nome} (${dados.funcao})`);
    return membro;
  } catch (error) {
    console.error('Erro ao criar membro da equipe:', error);
    throw error;
  }
}

// Fun√ß√£o para atualizar disponibilidade da equipe
export async function atualizarDisponibilidadeEquipe(
  membroId: string, 
  disponivel: boolean
) {
  try {
    await prisma.equipeDeApoio.update({
      where: { id: membroId },
      data: { disponivel }
    });

    console.log(`üë• Disponibilidade atualizada para membro ${membroId}: ${disponivel}`);
    return true;
  } catch (error) {
    console.error('Erro ao atualizar disponibilidade:', error);
    return false;
  }
}
